{"version":3,"sources":["store/formSlice.ts","components/MapContainer.tsx","components/RequestForm.tsx","components/Modal.tsx","utils/slippy.ts","components/TileDownloadPage.tsx","App.tsx","reportWebVitals.ts","store/middleware/logger.ts","store/store.ts","index.tsx"],"names":["getUrl","style","pixels","zoom","tile","process","x","y","fetchTiles","createAsyncThunk","tileBox","thunkAPI","a","formState","getState","form","console","info","tiles","length","Promise","allSettled","map","axios","url","method","responseType","then","response","rej","res","filename","nanoid","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","results","forEach","result","log","dispatch","setLoadingToFalse","formSlice","createSlice","name","initialState","upperLeftCoordinate","lat","lon","lowerRightCoordinate","zoomLevel","loading","mapStyle","error","reducers","setLoadingToTrue","state","setUpperLeftCoordinate","action","payload","setLowerRightCoordinate","setZoomLevel","setMapStyle","setPixels","setError","clearError","extraReducers","builder","addCase","fulfilled","actions","selectForm","mapStyleSelector","createSelector","upperLeftCoordinateSelector","lowerRightCoordinateSelector","zoomSelector","pixelSelector","loadingSelector","mapboxgl","workerClass","require","default","INITIAL_COORDINATES","Map","ReactMapboxGl","accessToken","MapContainer","useSelector","useDispatch","drawRef","useRef","useEffect","handleKeyPress","event","isComposing","key","current","draw","deleteAll","addEventListener","removeEventListener","updateCoordinates","features","getAll","upperLeft","geometry","coordinates","lowerRight","Box","sx","flexGrow","Grid","container","spacing","item","xs","containerStyle","height","width","marginLeft","marginBottom","center","ref","controls","polygon","trash","displayControlsDefault","onDrawCreate","currPolygons","delete","id","onDrawUpdate","onDrawDelete","onDrawSelectionChange","getSelected","changeMode","featureId","scaleCenter","TxCenter","Opposite","canRotate","modes","DrawRectangle","TxRectMode","parseCoordinatesToString","String","parseFloat","toFixed","parseCoordinatesToObject","coordinateString","coordinate","JSON","parse","e","validatePixels","RequestForm","onSubmit","isLoading","localStateUpperLeft","setLocalStateUpperLeft","useState","localStateLowerRight","setLocalStateLowerRight","localPixelState","setLocalPixelState","component","m","noValidate","autoComplete","marginTop","TextField","required","label","value","onChange","target","disabled","Number","Select","labelId","MenuItem","marginRight","Typography","gutterBottom","Slider","defaultValue","valueLabelDisplay","min","max","step","onClick","Button","variant","color","startIcon","Modal","open","onContinue","onDecline","text","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","RADIANS_PER_DEGREE","Math","PI","getSlippyMapCoordinate","gpsCoordinate","latRadians","n","pow","floor","tan","cos","getTiles","slippyUpperLeft","slippyLowerRight","push","DEFAULT_MODAL_TEXT","TileDownloadPage","modalOpen","setModalOpen","modalText","setModalText","slippyTileBox","setTileBox","toast","position","hideProgressBar","closeOnClick","pauseOnHover","draggable","autoClose","progress","undefined","dismiss","styleId","xCount","abs","yCount","numTiles","getTileBox","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","logger","store","next","group","type","groupEnd","configureStore","reducer","formReducer","middleware","thunkMiddleware","loggerMiddleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bc758b30.chunk.js","sourcesContent":["import {createAsyncThunk, createSelector, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {GpsCoordinate, SlippyMapCoordinate} from \"../utils/Coordinates\";\nimport {SlippyMapBox, StyleId, ZoomLevel} from \"../utils/SlippyMapBox\";\nimport axios from \"axios\";\nimport {nanoid} from \"nanoid\";\n\nexport type TileSize = 256 | 512 | 1024\n\nexport interface FormState {\n    upperLeftCoordinate: GpsCoordinate,\n    lowerRightCoordinate: GpsCoordinate,\n    zoomLevel: ZoomLevel,\n    loading: boolean,\n    mapStyle: StyleId,\n    pixels: TileSize,\n    error: string\n}\n\nconst initialState: FormState = {\n    upperLeftCoordinate: {\n        lat: null,\n        lon: null\n    },\n    lowerRightCoordinate: {\n        lat: null,\n        lon: null\n    },\n    zoomLevel: 8,\n    loading: false,\n    mapStyle: 'satellite-streets-v11',\n    pixels: 512,\n    error: null\n}\nconst BASE_MAPBOX_URL = process.env.REACT_APP_BASE_MAPBOX_URL\nconst MAPBOX_ACCESS_TOKEN = process.env.REACT_APP_MAPBOX_API_ACCESS_TOKEN\nconst FETCH_TILES_ACTION = 'form/fetchTiles'\n\nconst getUrl = (style: StyleId, pixels: number, zoom: ZoomLevel, tile: SlippyMapCoordinate) =>\n    `${BASE_MAPBOX_URL}/${style}/tiles/${pixels}/${zoom}/${tile.x}/${tile.y}?access_token=${MAPBOX_ACCESS_TOKEN}`\n\nexport const fetchTiles = createAsyncThunk(\n    FETCH_TILES_ACTION,\n    async (tileBox: SlippyMapBox, thunkAPI: any) => {\n        const formState: FormState = thunkAPI.getState().form\n\n        console.info(`Downloading ${tileBox.tiles.length} tiles`)\n\n        const results = await Promise.allSettled(\n            tileBox.tiles.map((tile) => {\n                return axios({\n                    url: getUrl(tileBox.style, formState.pixels, tileBox.zoom, tile),\n                    method: 'GET',\n                    responseType: 'blob'\n                }).then((response) => {\n                    return new Promise((rej, res) => {\n                        const filename = `mapbox-tile-${nanoid(10)}.jpg`\n                        const url = window.URL.createObjectURL(new Blob([response.data]));\n                        const link = document.createElement('a');\n                        link.href = url;\n                        link.setAttribute('download', filename);\n                        document.body.appendChild(link);\n                        link.click();\n                        res()\n                    })\n                })\n            }))\n        results.forEach((result) => console.log(result) )\n        thunkAPI.dispatch(setLoadingToFalse())\n        return results\n    }\n)\n\nexport const formSlice = createSlice({\n    name: 'form',\n    initialState,\n    reducers: {\n        setLoadingToTrue: state => { state.loading = true },\n        setLoadingToFalse: state => { state.loading = false },\n        setUpperLeftCoordinate: (state, action: PayloadAction<GpsCoordinate>) => {\n            state.upperLeftCoordinate = action.payload\n        },\n        setLowerRightCoordinate: (state, action: PayloadAction<GpsCoordinate>) => {\n            state.lowerRightCoordinate = action.payload\n        },\n        setZoomLevel: (state, action: PayloadAction<ZoomLevel>) => {\n            state.zoomLevel = action.payload\n        },\n        setMapStyle: (state, action: PayloadAction<StyleId>) => {\n            state.mapStyle = action.payload\n        },\n        setPixels: (state, action: PayloadAction<TileSize>) => {\n            state.pixels = action.payload\n        },\n        setError: (state, action: PayloadAction<string>) => {\n            state.error = action.payload\n        },\n        clearError: (state) => { state.error = null }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchTiles.fulfilled, (state, action) => {\n            console.log(\"SUCCESS\")\n        })\n    }\n});\n\nexport const {\n    setLoadingToTrue,\n    setLoadingToFalse,\n    setUpperLeftCoordinate,\n    setLowerRightCoordinate,\n    setZoomLevel,\n    setMapStyle,\n    setPixels\n} = formSlice.actions\nconst selectForm = state => state.form\nexport const mapStyleSelector = createSelector(selectForm, state => state.mapStyle)\nexport const upperLeftCoordinateSelector = createSelector(selectForm, state => state.upperLeftCoordinate)\nexport const lowerRightCoordinateSelector = createSelector(selectForm, state => state.lowerRightCoordinate)\nexport const zoomSelector = createSelector(selectForm, state => state.zoomLevel)\nexport const pixelSelector = createSelector(selectForm, state => state.pixels)\nexport const loadingSelector = createSelector(selectForm, state => state.loading)\n\n\nexport default formSlice.reducer\n","import { GpsCoordinate } from \"../utils/Coordinates\";\nimport mapboxgl from \"mapbox-gl\";\nimport ReactMapboxGl from \"react-mapbox-gl\";\nimport DrawControl from 'react-mapbox-gl-draw';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\nimport DrawRectangle from 'mapbox-gl-draw-rectangle-mode';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { mapStyleSelector, zoomSelector } from \"../store/formSlice\";\nimport { useEffect, useRef } from \"react\";\nimport { setLowerRightCoordinate, setUpperLeftCoordinate } from \"../store/formSlice\";\nimport { TxCenter, TxRectMode } from 'mapbox-gl-draw-rotate-scale-rect-mode'\n\n/**\n * This is a workaround for the issue: https://github.com/mapbox/mapbox-gl-js/issues/10173\n */\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\n// Minneapolis / St. Paul\nconst INITIAL_COORDINATES: [number, number] = [-93.16534986838542, 44.96687220057306]\nconst ESC_KEYBOARD_EVENT: string = 'Escape'\n\nconst Map = ReactMapboxGl({\n    accessToken: process.env.REACT_APP_MAPBOX_API_ACCESS_TOKEN\n});\n\nexport const MapContainer = () => {\n    const mapStyle = useSelector(mapStyleSelector)\n    const zoom = useSelector(zoomSelector)\n    const dispatch = useDispatch()\n    let drawRef = useRef<DrawControl>(null)\n\n    useEffect(() => {\n        const handleKeyPress = (event) => {\n            if (\n                !event.isComposing &&\n                event.key === ESC_KEYBOARD_EVENT\n            ) {\n                drawRef.current.draw.deleteAll()\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyPress)\n        return () => {\n            window.removeEventListener('keydown', handleKeyPress)\n        }\n    })\n\n    const updateCoordinates = () => {\n        const { features } = drawRef.current.draw.getAll()\n\n        if (!features) {\n            return [null, null]\n        }\n        const upperLeft: GpsCoordinate = {\n            lat: features[0].geometry.coordinates[0][0][1],\n            lon: features[0].geometry.coordinates[0][0][0]\n        }\n        const lowerRight: GpsCoordinate = {\n            lat: features[0].geometry.coordinates[0][2][1],\n            lon: features[0].geometry.coordinates[0][2][0]\n        }\n        dispatch(setUpperLeftCoordinate(upperLeft))\n        dispatch(setLowerRightCoordinate(lowerRight))\n    }\n\n\n    const onDrawCreate = () => {\n        const currPolygons = drawRef.current.draw.getAll()\n        if (drawRef.current.draw.getAll().features.length > 1) {\n            drawRef.current.draw.delete(currPolygons.features[0].id)\n        }\n        updateCoordinates()\n    };\n\n    const onDrawUpdate = () => {\n        updateCoordinates()\n    };\n\n    const onDrawDelete = () => {\n        dispatch(setUpperLeftCoordinate({\n            lat: null,\n            lon: null\n        }))\n        dispatch(setLowerRightCoordinate({\n            lat: null,\n            lon: null\n        }))\n    }\n\n    const onDrawSelectionChange = () => {\n        if (drawRef.current.draw.getSelected().features.length > 0) {\n            drawRef.current.draw.changeMode('tx_rect', {\n                featureId: drawRef.current.draw.getSelected().features[0].id,\n                scaleCenter: TxCenter.Opposite,\n                canRotate: false\n            })\n        }\n    }\n\n    return (\n        <Box sx={{flexGrow: 1}}>\n            <Grid container spacing={2}>\n                <Grid item xs={11}>\n                    <h2>Mapbox Static Tile Downloader</h2>\n                </Grid>\n                <Map\n                    style={`mapbox://styles/mapbox/${mapStyle}`} // eslint-disable-line\n                    containerStyle={{\n                        height: \"700px\",\n                        width: \"96vw\",\n                        marginLeft: \"2vw\",\n                        marginBottom: \"2vw\"\n                    }}\n                    center={INITIAL_COORDINATES}\n                    zoom={[zoom]}\n                >\n                    <DrawControl\n                        ref={drawRef}\n                        controls={{polygon: true, trash: true}}\n                        displayControlsDefault={false}\n                        onDrawCreate={onDrawCreate}\n                        onDrawUpdate={onDrawUpdate}\n                        onDrawDelete={onDrawDelete}\n                        onDrawSelectionChange={onDrawSelectionChange}\n                        modes={{'draw_polygon': DrawRectangle, 'tx_rect': TxRectMode}}\n                    />\n                </Map>\n            </Grid>\n        </Box>\n    )\n}","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Slider from '@mui/material/Slider';\nimport { Button, Select, MenuItem, Typography } from \"@mui/material\";\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport { GpsCoordinate } from \"../utils/Coordinates\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    loadingSelector,\n    lowerRightCoordinateSelector,\n    mapStyleSelector, pixelSelector, setLowerRightCoordinate,\n    setMapStyle, setPixels, setUpperLeftCoordinate, setZoomLevel, TileSize,\n    upperLeftCoordinateSelector, zoomSelector\n} from \"../store/formSlice\";\nimport { useEffect, useState } from \"react\";\n\n\nconst DECIMAL_PLACES = 5\n\nexport type formProps = {\n    onSubmit: (event) => any\n};\n\nconst parseCoordinatesToString: (GpsCoordinate) => string = (coordinates: GpsCoordinate) => {\n    const lat = coordinates.lat ? String(coordinates.lat) : null\n    const lon = coordinates.lon ? String(coordinates.lon) : null\n\n    return !lat || !lon ? '' :\n        `[ ${parseFloat(lat).toFixed(DECIMAL_PLACES)}, ${parseFloat(lon).toFixed(DECIMAL_PLACES)} ]`\n}\n\nconst parseCoordinatesToObject: (string) => GpsCoordinate | null = (coordinateString) => {\n    try {\n        const coordinate: [number, number] = JSON.parse(coordinateString)\n        return {\n            lat: coordinate[0],\n            lon: coordinate[1]\n        }\n    } catch (e) {\n        return null\n    }\n}\n\nconst validatePixels = (pixels) => pixels === 256 || pixels === 512 || pixels === 1024\n\nexport default function RequestForm({onSubmit}: formProps) {\n    const dispatch = useDispatch()\n    const mapStyle = useSelector(mapStyleSelector)\n    const upperLeftCoordinate = useSelector(upperLeftCoordinateSelector)\n    const lowerRightCoordinate = useSelector(lowerRightCoordinateSelector)\n    const zoomLevel = useSelector(zoomSelector)\n    const pixels = useSelector(pixelSelector)\n    const isLoading = useSelector(loadingSelector)\n    const [localStateUpperLeft, setLocalStateUpperLeft] = useState<string>(parseCoordinatesToString(upperLeftCoordinate))\n    const [localStateLowerRight, setLocalStateLowerRight] = useState<string>(parseCoordinatesToString(lowerRightCoordinate))\n    const [localPixelState, setLocalPixelState] = useState<string>(String(pixels))\n\n    const handleSelectStyle = (event: any) => {\n        dispatch(setMapStyle(event.target.value))\n    }\n\n    useEffect(() => {\n        setLocalStateUpperLeft(parseCoordinatesToString(upperLeftCoordinate))\n        setLocalStateLowerRight(parseCoordinatesToString(lowerRightCoordinate))\n    }, [upperLeftCoordinate, lowerRightCoordinate])\n\n    useEffect(() => {\n        setLocalPixelState(pixels)\n    }, [pixels])\n\n    const handleSelectUpperLeftCoordinates = (event: any) => {\n        setLocalStateUpperLeft(event.target.value as string)\n        const coordinate = parseCoordinatesToObject(event.target.value as string)\n        if (coordinate) {\n            dispatch(setUpperLeftCoordinate(coordinate))\n        }\n    }\n\n    const handleSelectLowerRightCoordinates = (event: any) => {\n        setLocalStateLowerRight(event.target.value as string)\n        const coordinate = parseCoordinatesToObject(event.target.value as string)\n        if (coordinate) {\n            dispatch(setLowerRightCoordinate(coordinate))\n        }\n    }\n\n    const handleSelectZoom = (event) => {\n        dispatch(setZoomLevel(event.target.value))\n    }\n\n    const handleClickZoom = () => {\n        // Change the zoom level to force the view to adjust to current zoom\n        // this is a convenience for users to navigate back to the tile zoom level\n        dispatch(setZoomLevel(1))\n        dispatch(setZoomLevel(zoomLevel))\n    }\n\n    const handleSelectPixelSize = (event) => {\n        setLocalPixelState(event.target.value)\n        const pixels = Number.parseFloat(event.target.value)\n        if (validatePixels(pixels)) {\n            dispatch(setPixels(pixels as TileSize))\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <Box\n                component=\"form\"\n                sx={{\n                    '& > :not(style)': {m: 1, width: '30ch'},\n                }}\n                noValidate\n                autoComplete=\"off\"\n                style={{marginTop: '20px'}}\n            >\n                <TextField\n                    required\n                    id=\"outlined-required\"\n                    label=\"Upper Left Coordinates\"\n                    value={localStateUpperLeft}\n                    onChange={handleSelectUpperLeftCoordinates}\n                    error={!parseCoordinatesToObject(localStateUpperLeft)}\n                    disabled={isLoading}\n                />\n                <TextField\n                    required\n                    id=\"outlined-required\"\n                    label=\"Lower Right Coordinates\"\n                    value={localStateLowerRight}\n                    onChange={handleSelectLowerRightCoordinates}\n                    error={!parseCoordinatesToObject(localStateLowerRight)}\n                    disabled={isLoading}\n                />\n                <TextField\n                    id=\"outlined-required\"\n                    label=\"Tile Size in Pixels Squared\"\n                    value={localPixelState}\n                    error={!validatePixels(Number.parseFloat(localPixelState))}\n                    onChange={handleSelectPixelSize}\n                    disabled={isLoading}\n                />\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={mapStyle}\n                    // label=\"Map Style\"\n                    onChange={handleSelectStyle}\n                    disabled={isLoading}\n                    style={{marginTop: '8px'}}\n                >\n                    <MenuItem value={'streets-v11'}>streets-v11</MenuItem>\n                    <MenuItem value={'outdoors-v11'}>outdoors-v11</MenuItem>\n                    <MenuItem value={'light-v10'}>light-v10</MenuItem>\n                    <MenuItem value={'dark-v10'}>dark-v10</MenuItem>\n                    <MenuItem value={'satellite-v9'}>satellite-v9</MenuItem>\n                    <MenuItem value={'satellite-streets-v11'}>satellite-streets-v11</MenuItem>\n                    <MenuItem value={'navigation-day-v1'}>navigation-day-v1</MenuItem>\n                    <MenuItem value={'navigation-night-v1'}>navigation-night-v1</MenuItem>\n                </Select>\n                <Box\n                    sx={{width: 320}}\n                    style={{marginLeft: 'auto', marginRight: 'auto', marginTop: '20px'}}\n                >\n                    <Typography gutterBottom>Tile Zoom Level</Typography>\n                    <Slider\n                        aria-label=\"slider\"\n                        defaultValue={8}\n                        valueLabelDisplay=\"on\"\n                        min={1}\n                        max={17}\n                        step={1}\n                        style={{marginTop: '45px'}}\n                        onChange={handleSelectZoom}\n                        onClick={handleClickZoom}\n                        disabled={isLoading}\n                    />\n                </Box>\n\n            </Box>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<CloudDownloadIcon/>}\n                onClick={onSubmit}\n                style={{marginTop: '45px', marginBottom: '100px'}}\n                disabled={\n                    isLoading ||\n                    !validatePixels(pixels) ||\n                    !parseCoordinatesToObject(localStateUpperLeft) ||\n                    !parseCoordinatesToObject(localStateLowerRight)\n                }\n            >\n                Download Tiles\n            </Button>\n        </React.Fragment>\n    );\n}","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nexport type ModalProps = {\n    open: boolean,\n    onContinue: (event) => any,\n    onDecline: (event) => any,\n    text: string\n}\n\nexport default function Modal({open, onContinue, onDecline, text}: ModalProps) {\n\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                onClose={onDecline}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    {\"Use Google's location service?\"}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {text}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onDecline}>Cancel</Button>\n                    <Button onClick={onContinue} autoFocus>\n                        Continue\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}","import {SlippyMapBox, StyleId, ZoomLevel} from \"./SlippyMapBox\";\nimport {GpsCoordinate, SlippyMapCoordinate} from \"./Coordinates\";\n\nconst RADIANS_PER_DEGREE = Math.PI / 180\n\n/**\n * See https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Mathematics\n * for an explanation of this formula\n*/\nfunction getSlippyMapCoordinate(gpsCoordinate: GpsCoordinate, zoom: number): SlippyMapCoordinate {\n    const latRadians = RADIANS_PER_DEGREE * gpsCoordinate.lat\n    console.log(gpsCoordinate)\n    const n = Math.pow(2, zoom)\n    return {\n        x: Math.floor((gpsCoordinate.lon + 180) / 360 * n),\n        y: Math.floor((1 - Math.log(Math.tan(latRadians) + (1 / Math.cos(latRadians))) / Math.PI) / 2 * n)\n    }\n}\n\nfunction getTiles(slippyUpperLeft: SlippyMapCoordinate, slippyLowerRight: SlippyMapCoordinate): Array<SlippyMapCoordinate> {\n    const tiles = []\n\n    for (let x = slippyUpperLeft.x; x <= slippyLowerRight.x; x++) {\n        for(let y = slippyUpperLeft.y; y <= slippyLowerRight.y; y++) {\n            tiles.push({x: x, y: y})\n        }\n    }\n\n    return tiles\n}\n\nexport function getTileBox(\n    upperLeftCoordinate: GpsCoordinate,\n    lowerRightCoordinate: GpsCoordinate,\n    zoomLevel: ZoomLevel,\n    styleId: StyleId):\n    SlippyMapBox {\n    const slippyUpperLeft = getSlippyMapCoordinate(upperLeftCoordinate, zoomLevel)\n    const slippyLowerRight = getSlippyMapCoordinate(lowerRightCoordinate, zoomLevel)\n\n    const xCount = Math.abs(slippyUpperLeft.x - slippyLowerRight.x) + 1\n    const yCount = Math.abs(slippyUpperLeft.y - slippyLowerRight.y) + 1\n\n    return {\n        upperLeftCoordinate: slippyUpperLeft,\n        lowerRightCoordinate: slippyLowerRight,\n        zoom: zoomLevel,\n        xCount: xCount,\n        yCount: yCount,\n        style: styleId,\n        numTiles: xCount * yCount,\n        tiles: getTiles(slippyUpperLeft, slippyLowerRight)\n    }\n}\n\n","import { MapContainer } from './MapContainer'\nimport RequestForm from \"./RequestForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    fetchTiles,\n    loadingSelector, lowerRightCoordinateSelector,\n    mapStyleSelector,\n    setLoadingToFalse,\n    setLoadingToTrue,\n    upperLeftCoordinateSelector, zoomSelector\n} from \"../store/formSlice\";\nimport {toast, ToastContainer} from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport {useEffect, useState} from \"react\";\nimport Modal from \"./Modal\";\nimport {getTileBox} from \"../utils/slippy\";\n\nconst DEFAULT_MODAL_TEXT = 'Are you sure you want to continue with download?'\n\nexport const TileDownloadPage = () => {\n    const dispatch = useDispatch()\n    const isLoading = useSelector(loadingSelector)\n    const mapStyle = useSelector(mapStyleSelector)\n    const upperLeftCoordinate = useSelector(upperLeftCoordinateSelector)\n    const lowerRightCoordinate = useSelector(lowerRightCoordinateSelector)\n    const zoomLevel = useSelector(zoomSelector)\n    const [modalOpen, setModalOpen] = useState<boolean>(false)\n    const [modalText, setModalText] = useState<string>(DEFAULT_MODAL_TEXT)\n    const [slippyTileBox, setTileBox] = useState<any>(null)\n\n    const handleRequestTiles = (event) => {\n        const tileBox = getTileBox(\n            upperLeftCoordinate,\n            lowerRightCoordinate,\n            zoomLevel,\n            mapStyle\n        )\n\n        if (tileBox) {\n            setTileBox(tileBox)\n            setModalText(`Are you sure you want to download ${tileBox.tiles.length} map tile files?`)\n            setModalOpen(true)\n        }\n    }\n\n    const onContinueDownload = () => {\n        setModalOpen(false)\n        setModalText(DEFAULT_MODAL_TEXT)\n        dispatch(setLoadingToTrue())\n        dispatch(fetchTiles(slippyTileBox))\n    }\n\n    const onCancelDownload = () => {\n        setModalOpen(false)\n        setModalText(DEFAULT_MODAL_TEXT)\n        dispatch(setLoadingToFalse())\n    }\n\n    useEffect(() => {\n        if (isLoading) {\n            toast.info('Fetching Tiles!', {\n                position: \"top-right\",\n                hideProgressBar: true,\n                closeOnClick: false,\n                pauseOnHover: true,\n                draggable: true,\n                autoClose: false,\n                progress: undefined,\n            });\n        } else {\n            toast.dismiss()\n        }\n    }, [isLoading])\n\n    return (\n        <>\n            <MapContainer/>\n            <RequestForm\n                onSubmit={handleRequestTiles}\n            />\n            <ToastContainer/>\n            <Modal\n                onContinue={onContinueDownload}\n                onDecline={onCancelDownload}\n                open={modalOpen}\n                text={modalText}\n            />\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {TileDownloadPage} from \"./components/TileDownloadPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TileDownloadPage/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const logger = store => next => action => {\n    console.group(action.type)\n    console.info('dispatching', action)\n    let result = next(action)\n    console.log('next state', store.getState())\n    console.groupEnd()\n    return result\n}\n\nexport default logger","import { configureStore } from '@reduxjs/toolkit'\nimport thunkMiddleware from 'redux-thunk'\nimport loggerMiddleware from './middleware/logger'\nimport formReducer from \"./formSlice\"\n\nexport const store = configureStore({\n    reducer: {\n        form: formReducer\n    },\n    middleware: [thunkMiddleware, loggerMiddleware],\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}